@page "/artikel-bearbeiten/{ArtikelId:int}"
@using Lagerverwaltung.Data
@using Lagerverwaltung.Models
@using Microsoft.EntityFrameworkCore
@inject LagerDbContext DbContext
@inject NavigationManager Navigation
@rendermode InteractiveServer

<h3>Artikel bearbeiten</h3>

<EditForm Model="Artikel" OnValidSubmit="Speichern">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label>Artikelname:</label>
        <InputText @bind-Value="Artikel.Artikelname" />
    </div>

    <div>
        <label>Beschreibung:</label>
        <InputText @bind-Value="Artikel.Beschreibung" />
    </div>

    <div>
        <label>Menge:</label>
        <InputNumber @bind-Value="Artikel.Menge" />
    </div>

    <div>
        <label>Preis pro Einheit:</label>
        <InputNumber @bind-Value="Artikel.PreisProEinheit" />
    </div>

    <div>
        <label>Lagerplatz:</label>
        <InputSelect @bind-Value="Artikel.LagerplatzId">
            <option value="">Bitte wählen</option>
            @foreach (var lagerplatz in Lagerplätze)
            {
                <option value="@lagerplatz.LagerplatzId">@lagerplatz.Name</option>
            }
        </InputSelect>
    </div>

    <button type="submit">Speichern</button>
</EditForm>

@code {
    [Parameter] public int ArtikelId { get; set; }
    private Artikel Artikel { get; set; } = new Artikel();
    private List<Lagerplatz> Lagerplätze { get; set; } = new List<Lagerplatz>();

    protected override async Task OnInitializedAsync()
    {
        // Lade den Artikel basierend auf der ArtikelId
        Artikel = await DbContext.Artikel.FindAsync(ArtikelId);

        // Lade die Lagerplätze
        Lagerplätze = await DbContext.Lagerplatz.ToListAsync();
    }

    private async Task Speichern()
    {
        // Speichere den aktualisierten Artikel
        DbContext.Artikel.Update(Artikel);
        await DbContext.SaveChangesAsync();

        // Navigation nach der Bearbeitung
        Navigation.NavigateTo("/artikel");
    }
}
