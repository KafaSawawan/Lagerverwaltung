@page "/bestand-aktualisieren"
@using Lagerverwaltung.Data
@using Lagerverwaltung.Models
@using Microsoft.EntityFrameworkCore
@inject LagerDbContext DbContext
@inject NavigationManager Navigation
@rendermode InteractiveServer

<h3>Bestand aktualisieren</h3>

<div>
    <label>Artikel auswählen:</label>
    <select @onchange="ArtikelAusgewählt">
        <option value="">-- Wählen Sie einen Artikel --</option>
        @foreach (var artikel in ArtikelListe)
        {
            <option value="@artikel.ArtikelId">@artikel.Artikelname</option>
        }
    </select>
</div>

@if (SelectedArtikel != null)
{
    <div>
        <label>Aktuelle Menge:</label>
        <p>@SelectedArtikel.Menge</p>
    </div>

    <div>
        <label>Neue Menge:</label>
        <InputNumber @bind-Value="NeueMenge" min="0" />
    </div>

    <button @onclick="UpdateBestand">Aktualisieren</button>
}

@code {
    private List<Artikel> ArtikelListe = new();
    private Artikel? SelectedArtikel;
    private int NeueMenge;

    protected override async Task OnInitializedAsync()
    {
        ArtikelListe = await DbContext.Artikel.ToListAsync();
    }

    private void ArtikelAusgewählt(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var artikelId))
        {
            SelectedArtikel = ArtikelListe.FirstOrDefault(a => a.ArtikelId == artikelId);
            if (SelectedArtikel != null)
            {
                NeueMenge = SelectedArtikel.Menge; // Die aktuelle Menge vorfüllen
            }
        }
    }

    private async Task UpdateBestand()
    {
        if (SelectedArtikel != null)
        {
            SelectedArtikel.Menge = NeueMenge; // Aktualisiere mit der neuen Menge
            DbContext.Artikel.Update(SelectedArtikel);
            await DbContext.SaveChangesAsync();
            Navigation.NavigateTo("/artikel");
        }
    }
}
